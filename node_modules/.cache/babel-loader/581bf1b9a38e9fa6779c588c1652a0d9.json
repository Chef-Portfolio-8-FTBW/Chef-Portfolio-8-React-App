{"ast":null,"code":"var _jsxFileName = \"/Users/anna/Lambda/3. Web Applications II/4. Build/Chef-Portfolio-8-React-App/chef-portfolio-app/src/components/CreatePost.js\";\n//create a form for a chef to make a new post\n// use axios.post request on form submit\n// route back to chef profile page on submit\nimport React from \"react\";\nimport NavBar from \"../universal/NavBar\";\nimport Footer from \"../universal/Footer\";\nimport { connect } from \"react-redux\";\nimport { postNewRecipe } from \"../actions/index\";\nimport { Formik, Form, Field } from \"formik\";\nimport * as Yup from \"yup\";\n\nfunction CreatePost(props) {\n  //this is only for demonstration purposes- include axios post with this props.history.push\n  // const [recipes, setRecipes] = useState([]);\n  const userSchema = Yup.object().shape({\n    recipe_name: Yup.string().required(),\n    recipe_ingredients: Yup.string().required(),\n    instructions: Yup.string().required()\n  });\n  return React.createElement(React.Fragment, null, React.createElement(React.Fragment, null, React.createElement(NavBar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }), React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, \"Create Post\"), React.createElement(Formik, {\n    initialValues: {\n      chef_name: \"\",\n      recipe_name: \"\",\n      //req\n      recipe_photo: \"\",\n      recipe_ingredients: \"\",\n      //req\n      cook_time: \"\",\n      prep_time: \"\",\n      instructions: \"\",\n      //req\n      servings: \"\"\n    },\n    onSubmit: (values, tools) => {\n      tools.resetForm();\n      props.postNewRecipe(values); // props.history.push(`/recipe/${props.match.params.id}`);\n      // axios\n      //   .post(\"https://reqres.in/api/users\", values)\n      //   .then(res => {\n      //     console.log(\"SUCCESSFUL\", res);\n      //     const recipeData = res.data;\n      //     setRecipes([...recipes, recipeData]);\n      //   })\n      //   .catch(err => {\n      //     console.log(\"FAILURE\", err);\n      //   });\n    },\n    validationSchema: userSchema,\n    render: props => {\n      return React.createElement(Form, {\n        className: \"formContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, \"Your name:\", React.createElement(Field, {\n        name: \"chef_name\",\n        type: \"text\",\n        placeholder: \"David Elofson\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      })), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, \"Recipe name:\", React.createElement(Field, {\n        name: \"recipe_name\",\n        type: \"text\",\n        placeholder: \"Squash and Feta Flatbread\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      })), props.errors.recipe_name && props.touched.recipe_name ? React.createElement(\"span\", {\n        className: \"red\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, props.errors.recipe_name) : \"\", React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, \"Ingredients:\", React.createElement(Field, {\n        name: \"recipe_ingredients\",\n        as: \"textarea\",\n        placeholder: \"List of ingredients needed\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      })), props.errors.ingredients && props.touched.ingredients ? React.createElement(\"span\", {\n        className: \"red\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, props.errors.ingredients) : \"\", React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, \"Cook time:\", React.createElement(Field, {\n        name: \"cook_time\",\n        type: \"text\",\n        placeholder: \"35 minutes\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      })), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, \"Prep time:\", React.createElement(Field, {\n        name: \"prep_time\",\n        type: \"text\",\n        placeholder: \"20 minutes\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      })), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, \"Instructions:\", React.createElement(Field, {\n        name: \"instructions\",\n        as: \"textarea\",\n        placeholder: \"List of instructions\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      })), props.errors.instructions && props.touched.instructions ? React.createElement(\"span\", {\n        className: \"red\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, props.errors.instructions) : \"\", React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, \"Servings:\", React.createElement(Field, {\n        name: \"servings\",\n        type: \"text\",\n        placeholder: \"2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      })), React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, \"Add a photo:\", React.createElement(Field, {\n        name: \"recipe_photo\",\n        type: \"text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      })), React.createElement(\"input\", {\n        className: \"submitButton\",\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }), React.createElement(Footer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  })));\n}\n\nconst mapStateToProps = state => {\n  return {\n    error: state.error\n  };\n};\n\nexport default connect(mapStateToProps, {\n  postNewRecipe\n})(CreatePost);","map":{"version":3,"sources":["/Users/anna/Lambda/3. Web Applications II/4. Build/Chef-Portfolio-8-React-App/chef-portfolio-app/src/components/CreatePost.js"],"names":["React","NavBar","Footer","connect","postNewRecipe","Formik","Form","Field","Yup","CreatePost","props","userSchema","object","shape","recipe_name","string","required","recipe_ingredients","instructions","chef_name","recipe_photo","cook_time","prep_time","servings","values","tools","resetForm","errors","touched","ingredients","mapStateToProps","state","error"],"mappings":"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","sourcesContent":["//create a form for a chef to make a new post\n// use axios.post request on form submit\n// route back to chef profile page on submit\n\nimport React from \"react\";\n\nimport NavBar from \"../universal/NavBar\";\nimport Footer from \"../universal/Footer\";\nimport { connect } from \"react-redux\";\nimport { postNewRecipe } from \"../actions/index\";\nimport { Formik, Form, Field } from \"formik\";\nimport * as Yup from \"yup\";\n\nfunction CreatePost(props) {\n  //this is only for demonstration purposes- include axios post with this props.history.push\n\n  // const [recipes, setRecipes] = useState([]);\n\n  const userSchema = Yup.object().shape({\n    recipe_name: Yup.string().required(),\n    recipe_ingredients: Yup.string().required(),\n    instructions: Yup.string().required()\n  });\n\n  return (\n    <>\n      <>\n        <NavBar />\n        <h1>Create Post</h1>\n\n        <Formik\n          initialValues={{\n            chef_name: \"\",\n            recipe_name: \"\", //req\n            recipe_photo: \"\",\n            recipe_ingredients: \"\", //req\n            cook_time: \"\",\n            prep_time: \"\",\n            instructions: \"\", //req\n            servings: \"\"\n          }}\n          onSubmit={(values, tools) => {\n            tools.resetForm();\n            props.postNewRecipe(values);\n            // props.history.push(`/recipe/${props.match.params.id}`);\n            // axios\n            //   .post(\"https://reqres.in/api/users\", values)\n            //   .then(res => {\n            //     console.log(\"SUCCESSFUL\", res);\n\n            //     const recipeData = res.data;\n\n            //     setRecipes([...recipes, recipeData]);\n            //   })\n            //   .catch(err => {\n            //     console.log(\"FAILURE\", err);\n            //   });\n          }}\n          validationSchema={userSchema}\n          render={props => {\n            return (\n              <Form className=\"formContainer\">\n                <label>\n                  Your name:\n                  <Field\n                    name=\"chef_name\"\n                    type=\"text\"\n                    placeholder=\"David Elofson\"\n                  />\n                </label>\n\n                <label>\n                  Recipe name:\n                  <Field\n                    name=\"recipe_name\"\n                    type=\"text\"\n                    placeholder=\"Squash and Feta Flatbread\"\n                  />\n                </label>\n                {props.errors.recipe_name && props.touched.recipe_name ? (\n                  <span className=\"red\">{props.errors.recipe_name}</span>\n                ) : (\n                  \"\"\n                )}\n\n                <label>\n                  Ingredients:\n                  <Field\n                    name=\"recipe_ingredients\"\n                    as=\"textarea\"\n                    placeholder=\"List of ingredients needed\"\n                  />\n                </label>\n                {props.errors.ingredients && props.touched.ingredients ? (\n                  <span className=\"red\">{props.errors.ingredients}</span>\n                ) : (\n                  \"\"\n                )}\n\n                <label>\n                  Cook time:\n                  <Field\n                    name=\"cook_time\"\n                    type=\"text\"\n                    placeholder=\"35 minutes\"\n                  />\n                </label>\n\n                <label>\n                  Prep time:\n                  <Field\n                    name=\"prep_time\"\n                    type=\"text\"\n                    placeholder=\"20 minutes\"\n                  />\n                </label>\n\n                <label>\n                  Instructions:\n                  <Field\n                    name=\"instructions\"\n                    as=\"textarea\"\n                    placeholder=\"List of instructions\"\n                  />\n                </label>\n                {props.errors.instructions && props.touched.instructions ? (\n                  <span className=\"red\">{props.errors.instructions}</span>\n                ) : (\n                  \"\"\n                )}\n\n                <label>\n                  Servings:\n                  <Field name=\"servings\" type=\"text\" placeholder=\"2\" />\n                </label>\n\n                <label>\n                  Add a photo:\n                  <Field name=\"recipe_photo\" type=\"text\" />\n                </label>\n\n                <input className=\"submitButton\" type=\"submit\" />\n              </Form>\n            );\n          }}\n        />\n        <Footer />\n      </>\n    </>\n  );\n}\n\nconst mapStateToProps = state => {\n  return {\n    error: state.error\n  };\n};\n\nexport default connect(mapStateToProps, { postNewRecipe })(CreatePost);\n"]},"metadata":{},"sourceType":"module"}